name: Deploy NestJS Docker to ECR

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: staging
        type: choice
        options:
          - staging
          - preprod
          - prod
  push:
    branches:
      - staging
      - preprod
      - prod

env:
  AWS_REGION: eu-north-1

permissions:
  id-token: write # n√©cessaire pour OIDC
  contents: read # pour checkout

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Debug OIDC token (temporaire)
      - name: Debug OIDC token
        run: |
          echo "ACTIONS_ID_TOKEN_REQUEST_URL=$ACTIONS_ID_TOKEN_REQUEST_URL"
          echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN=$ACTIONS_ID_TOKEN_REQUEST_TOKEN"
          curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL" || echo "Token fetch failed"

      # 3Ô∏è‚É£ Configure AWS via OIDC
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{secrets.AWS_ROLE_TO_ASSUME_ARN}}
          aws-region: eu-north-1
          role-session-name: github-actions-nest
          # audience supprim√©, g√©r√© automatiquement

      # 4Ô∏è‚É£ Determine environment
      - name: Set environment
        run: |
          if [ -n "${{ github.event.inputs.environment }}" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=${GITHUB_REF##*/}" >> $GITHUB_ENV
          fi

      # 5Ô∏è‚É£ Get ECR URI from SSM
      - name: Get ECR URI from SSM
        id: get_ecr_uri
        run: |
          ECR_URI=$(aws ssm get-parameter \
            --name "/ecr/${ENVIRONMENT}/uri" \
            --query "Parameter.Value" \
            --output text)
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV
          echo "ECR_URI=$ECR_URI"

      # 6Ô∏è‚É£ Login to ECR
      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin $ECR_URI

      # 7Ô∏è‚É£ Build Docker image
      - name: Build Docker image
        run: |
          docker build -t $ECR_URI:${GITHUB_SHA} .

      # 8Ô∏è‚É£ Push Docker image to ECR
      - name: Push Docker image
        run: |
          docker push $ECR_URI:${GITHUB_SHA}

      # 9Ô∏è‚É£ Optional: Tag latest
      - name: Tag latest
        if: github.event.inputs.environment == 'staging'
        run: |
          docker tag $ECR_URI:${GITHUB_SHA} $ECR_URI:latest
          docker push $ECR_URI:latest

      - name: Update ECS service
        run: |
          CLUSTER="nest-api-${ENVIRONMENT}-cluster"
          SERVICE="nest-api-${ENVIRONMENT}-service"
          echo "üöÄ Updating ECS service $SERVICE in cluster $CLUSTER with new image"
          aws ecs update-service \
            --cluster "$CLUSTER" \
            --service "$SERVICE" \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
