name: Deploy NestJS Docker to ECR

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: staging
        type: choice
        options:
          - staging
          - preprod
          - prod
  push:
    branches:
      - staging
      - preprod
      - prod

env:
  AWS_REGION: eu-north-1

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Configure AWS via OIDC
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-nest

      # 3Ô∏è‚É£ Determine environment
      - name: Set environment
        run: |
          if [ -n "${{ github.event.inputs.environment }}" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=${GITHUB_REF##*/}" >> $GITHUB_ENV
          fi
          echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      # 4Ô∏è‚É£ Get ECR URI from SSM
      - name: Get ECR URI from SSM
        run: |
          ECR_URI=$(aws ssm get-parameter \
            --name "/ecr/${ENVIRONMENT}/uri" \
            --query "Parameter.Value" \
            --output text)
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV

      # 5Ô∏è‚É£ Login to ECR
      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin $ECR_URI

      # 6Ô∏è‚É£ Build & Tag Docker image
      - name: Build & Tag Docker image
        run: |
          echo "üê≥ Building Docker image..."
          docker build -t $ECR_URI:${IMAGE_TAG} .

          # Tag stable per environment
          docker tag $ECR_URI:${IMAGE_TAG} $ECR_URI:${ENVIRONMENT}

          # Tag latest only for staging & preprod
          if [ "${ENVIRONMENT}" = "staging" ] || [ "${ENVIRONMENT}" = "preprod" ]; then
            docker tag $ECR_URI:${IMAGE_TAG} $ECR_URI:${ENVIRONMENT}-latest
          fi

      # 7Ô∏è‚É£ Push Docker image(s)
      - name: Push Docker image(s)
        run: |
          echo "üì§ Pushing Docker images..."
          docker push $ECR_URI:${IMAGE_TAG}
          docker push $ECR_URI:${ENVIRONMENT}

          if [ "${ENVIRONMENT}" = "staging" ] || [ "${ENVIRONMENT}" = "preprod" ]; then
            docker push $ECR_URI:${ENVIRONMENT}-latest
          fi

      # 8Ô∏è‚É£ Update ECS service with correct tag
      - name: Update ECS service
        run: |
          CLUSTER="nest-api-${ENVIRONMENT}-cluster"
          SERVICE="nest-api-${ENVIRONMENT}-service"

          # Select tag to deploy
          if [ "${ENVIRONMENT}" = "prod" ]; then
            DEPLOY_TAG="${ENVIRONMENT}"
          else
            DEPLOY_TAG="${ENVIRONMENT}-latest"
          fi

          echo "üöÄ Updating ECS service $SERVICE in cluster $CLUSTER with image tag $DEPLOY_TAG"
          aws ecs update-service \
            --cluster "$CLUSTER" \
            --service "$SERVICE" \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }} \
            --image "$ECR_URI:$DEPLOY_TAG"
